@page "/register"
@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Inbursa.Client.Models

<div class="w-50 bg-white h-75 mx-auto shadow mt-5 d-flex" style="border-radius: 25px;">
  <div id="bg-login" class="h-100 w-50" style="border-top-left-radius: 25px; border-bottom-left-radius: 25px;"></div>
  <div class="p-4 py-5 w-100 h-100 d-flex flex-column"> 
    <h1 class="mb-4">Comience su experiencia con <span style="font-weight: bold">Inbursa</span></h1>
    <EditForm Model="@model" OnValidSubmit="CrearUsuario" class="d-flex flex-column align-items-start px-2" style="overflow-y: scroll;"> @*class="form-group border p-4 d-flex flex-column align-items-start w-100 h-100"*@
      <h4>Registro de cuenta</h4>
      <DataAnnotationsValidator />
      <ValidationSummary/>
      <div class="form-group mt-4 w-100">
          <label for="curp" class="fw-bold">CURP</label>
          <InputText id="curp" class="form-control p-2 px-3" @bind-Value="model.CURP" placeholder="Curp"/>
          <ValidationMessage For="@(() => model.CURP)" />
      </div>
      <div class="form-group mt-4 w-100">
          <label for="nombres" class="fw-bold">Nombres</label>
          <InputText id="nombres" class="form-control p-2 px-3" @bind-Value="model.Nombre" placeholder="Nombre(s)"/>
          <ValidationMessage For="@(() => model.Nombre)" />
      </div>
      <div class="form-group mt-4 w-100">
          <label for="apellidoPaterno" class="fw-bold">Apellido Paterno</label>
          <InputText id="apellidoPaterno" class="form-control p-2 px-3" @bind-Value="model.Apellido_P" placeholder="Apellido Paterno"/>
          <ValidationMessage For="@(() => model.Apellido_P)" />
      </div>
      <div class="form-group mt-4 w-100">
          <label for="apellidoMaterno" class="fw-bold">Apellido Materno</label>
          <InputText id="apellidoMaterno" class="form-control p-2 px-3" @bind-Value="model.Apellido_M" placeholder="Apellido Materno"/>
          <ValidationMessage For="@(() => model.Apellido_M)" />
      </div>
      <div class="form-group mt-4 w-100">
          <label for="fechaNacimiento" class="fw-bold">Fecha de Nacimiento</label>
          <InputDate id="fechaNacimiento" class="form-control p-2 px-3" @bind-Value="model.Cumpleanos"/>
          <ValidationMessage For="@(() => model.Cumpleanos)" />
      </div>
      <button type="submit" class="btn btn-primary p-2 px-4 rounded-pill mt-4" style="letter-spacing: 2px;"> 
        Registrarme
      </button>
      <a class="mt-2 link-dark" href="/" onclick="cambiarPestaÃ±a()" style="cursor: pointer;">Log In</a>
    </EditForm>
    @if (showCurpInv)
      {
        <div class="alert alert-danger mt-3" role="alert">
          El curp es invalido de acuerdo a los datos proporcionados.
        </div>
      }
    @if (showUserInv)
      {
        <div class="alert alert-danger mt-3" role="alert">
          Usuario ya ha sido registrado anteriormente.
        </div>
      }
  </div>
</div>

@code {
    private Usuario model = new();
    private bool showCurpInv = false;
    private bool showUserInv = false;
    
    DateTime fechaActual = DateTime.Today;

    @*protected override async Task OnInitializedAsync() => *@
    @*model = await Http.GetFromJsonAsync<Usuario>("http://localhost:5237/api/Usuario/dajwdja1");*@

    protected override void OnInitialized()
    {
        model.Cumpleanos = fechaActual;
    }

    private async Task CrearUsuario(){

        bool val1 = (model.CURP.Substring(0, 2).ToLower().Equals(model.Apellido_P.Substring(0, 2).ToLower()));
        bool val2 = (model.CURP.Substring(2, 1).ToLower().Equals(model.Apellido_M.Substring(0, 1).ToLower()));
        bool val3 = (model.CURP.Substring(3, 1).ToLower().Equals(model.Nombre.Substring(0, 1).ToLower()));
        bool val4 = (model.CURP.Substring(4, 2).Equals(model.Cumpleanos.ToString("yyyy").Substring(2, 2)));
        bool val5 = (model.CURP.Substring(6, 2).Equals(model.Cumpleanos.ToString("MM")));
        bool val6 = (model.CURP.Substring(8, 2).Equals(model.Cumpleanos.ToString("dd")));
                                
        if(val1 && val2 && val3 && val4 && val5 && val6){
            var jsonSerializerOptions = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
            HttpResponseMessage response = await Http.PostAsJsonAsync("http://localhost:5237/api/Usuario/Add", model, jsonSerializerOptions);
            await JSRuntime.InvokeAsync<object>("console.log", response);
            if(response.StatusCode == System.Net.HttpStatusCode.OK){
                NavigationManager.NavigateTo("/");
            }else{
                showUserInv = true;
                await Task.Delay(3000);
                showUserInv = false;
            }
        }else{
            showCurpInv = true;
            await Task.Delay(3000);
            showCurpInv = false;
        }
    }
}