@page "/"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using Inbursa.Client.Models

<div class="w-50 bg-white h-75 mx-auto shadow mt-5 d-flex" style="border-radius: 25px;">
  <div id="bg-login" class="h-100 w-50" style="border-top-left-radius: 25px; border-bottom-left-radius: 25px;"></div>
  <div class="p-4 py-5 d-flex flex-column">
    <h1 class="mb-4">Bienvenido a <span style="font-weight: bold">Inbursa</span></h1>
    <EditForm Model="@usuario" OnValidSubmit="@Login" class="d-flex flex-column align-items-start px-2">
      <h4>Inicio de sesión</h4>
      <div class="form-group mt-4 w-100">
        <label for="usuario" class="fw-bold">Usuario</label>
        <InputText @bind-Value="@usuario.Nom_Usuario" class="form-control p-2 px-3" id="usuario" placeholder="Nombre de usuario" required />
      </div>
      <div class="input-group mt-4 w-100">
        <InputText type="@(showPassword ? "text" : "password")" class="form-control p-2 px-3" @bind-Value="@usuario.Contrasena" placeholder="Contraseña"/>
        <div class="input-group-append">
            <button class="btn btn-outline-secondary h-100" type="button" @onclick="TogglePasswordVisibility">
              <i class="@(showPassword ? "oi oi-lock-unlocked" : "oi oi-lock-locked")"></i>
            </button>
        </div>
      </div>
      <button type="submit" class="btn btn-primary p-2 px-4 rounded-pill mt-4" style="letter-spacing: 2px;">
      Log In
      </button>

      <div>
      <a class="mt-2 link-dark" href="/register" onclick="cambiarPestaña()" style="cursor: pointer;">Registrarme</a>
      </div>

      @if (loginFallido)
      {
        <div class="alert alert-danger mt-3" role="alert">
          El inicio de sesión ha fallado. Verifique sus credenciales e intente nuevamente.
        </div>
      }
    </EditForm>
  </div>
</div>

@code {
  public bool Password { get; set; }
  private Usuario usuario = new Usuario();
  private bool loginFallido = false;
  private bool showPassword = false;

  private void TogglePasswordVisibility()
  {
    showPassword = !showPassword;
  }

  private async Task Login()
  {
    var response = await Http.GetFromJsonAsync<List<Usuario>>("http://localhost:5237/api/Usuario");
    var login = response.FirstOrDefault(u => u.Nom_Usuario == usuario.Nom_Usuario && u.Contrasena == usuario.Contrasena);
    if (login != null && login.Autorizada.Equals(1))
    {
        if(login.TipoDeUsuario == "Gerente")
        {
            NavigationManager.NavigateTo("/Employees/Gerente");
        }
        else if(login.TipoDeUsuario == "Usuario")
        {
            NavigationManager.NavigateTo("/User");
        }
        else
        {
            NavigationManager.NavigateTo("/Employee/Empleado");
        }
    }
    else
    {
        loginFallido = true;
        await Task.Delay(4000);
        loginFallido = false;
    }
  }
}
